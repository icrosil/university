/**
 * Gauss-Jordan elimination
 */

linear = (function () {
/**
 * Used internally to solve systems
 * If you want to solve A.x = B,
 * choose data=A and mirror=B.
 * mirror can be either an array representing a vector
 * or an array of arrays representing a matrix.
 */
  function Mat(data, mirror) {
  // Clone the original matrix
    this.data = new Array(data.length);
    for (var i = 0, cols = data[0].length; i < data.length; i++) {
      this.data[i] = new Array(cols);
      for (let j = 0; j < cols; j++) {
        this.data[i][j] = data[i][j];
      }
    }

    if (mirror) {
      if (typeof mirror[0] !== 'object') {
        for (var i = 0; i < mirror.length; i++) {
          mirror[i] = [mirror[i]];
        }
      }
      this.mirror = new Mat(mirror);
    }
  }

/**
 * Swap lines i and j in the matrix
 */
  Mat.prototype.swap = function (i, j) {
    if (this.mirror) this.mirror.swap(i, j);
    const tmp = this.data[i];
    this.data[i] = this.data[j];
    this.data[j] = tmp;
  };

/**
 * Multiply line number i by l
 */
  Mat.prototype.multline = function (i, l) {
    if (this.mirror) this.mirror.multline(i, l);
    const line = this.data[i];
    for (let k = line.length - 1; k >= 0; k--) {
      line[k] *= l;
    }
  };

/**
 * Add line number j multiplied by l to line number i
 */
  Mat.prototype.addmul = function (i, j, l) {
    if (this.mirror) this.mirror.addmul(i, j, l);
    let lineI = this.data[i], lineJ = this.data[j];
    for (let k = lineI.length - 1; k >= 0; k--) {
      lineI[k] = lineI[k] + l * lineJ[k];
    }
  };

  Mat.prototype.gauss = function () {
    let pivot = 0,
      lines = this.data.length,
      columns = this.data[0].length;
    for (let j = 0; j < columns; j++) {
    // Find the line on which there is the maximum value of column j
      let maxValue = 0, maxLine = 0;
      for (let k = pivot; k < lines; k++) {
        const val = this.data[k][j];
        if (Math.abs(val) > maxValue) {
          maxLine = k;
          maxValue = val;
        }
      }
    // The value of the pivot is maxValue
      if (maxValue !== 0) {
        this.multline(maxLine, 1 / maxValue);
        this.swap(maxLine, pivot);
        for (let i = 0; i < lines; i++) {
          if (i !== pivot) {
            this.addmul(i, pivot, -this.data[i][j]);
          }
        }
        pivot++;
      }
    }
    return this.mirror.data;
  };

/**
 * Solves A.x = b
 * @param A
 * @param b
 * @return x
 */
  exports.solve = function solve(A, b) {
    return new Mat(A, b).gauss().map(function (a) {
      return (a.length > 1) ? a : a[0];
    });
  };

  function identity(n) {
    const id = new Array(n);
    for (let i = 0; i < n; i++) {
      id[i] = new Array(n);
      for (let j = 0; j < n; j++) {
        id[i][j] = (i === j) ? 1 : 0;
      }
    }
    return id;
  }

/**
 * invert a matrix
 */
  exports.invert = function invert(A) {
    return new Mat(A, identity(A.length)).gauss();
  };

  return exports;
})();

if (typeof module.exports === 'object') module.exports = linear;
